{"componentChunkName":"component---src-templates-page-js","path":"/parse/examples/async_iterator/","result":{"data":{"page":{"html":"<h1 id=\"async-iterator\" style=\"position:relative;\"><a href=\"#async-iterator\" aria-label=\"async iterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async iterator</h1>\n<p>Async iterators provides an elegant method to iterate over each parsed records with the usage of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\"><code class=\"language-text\">for await...of</code> construct</a>.</p>\n<p>CSV parse rely on and leverages the Node.js stream readable API. It implements the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\">Symbol.asyncIterator</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\">Symbol.iterator</a> iterable protocol.</p>\n<p>This is kind of an obscure JS functionality and we don't have to deal with it. The end result is very comprehensive and illustrated with the <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/recipe.async.iterator.js\">async iterator example</a></p>\n<p>This example is available with the command <code class=\"language-text\">node samples/recipe.async.iterator.js</code>.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:fs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> __dirname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processFile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/fs_read.csv</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// CSV options if any</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> record <span class=\"token keyword\">of</span> parser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Work with each record</span>\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> records<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/recipe.async.iterator.js\">./packages/csv-parse/samples/recipe.async.iterator.js</a></div></div></p>\n<p>Async iteration is also supported in CoffeeScript. It is expressed with the <a href=\"https://coffeescript.org/#generators\"><code class=\"language-text\">for...from</code></a> syntax available since version 1.12.0. The <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/recipe.async.iterator.coffee\">async example in coffeescript</a> is:</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"coffee\"><pre class=\"language-coffee\"><code class=\"language-coffee\">import fs from <span class=\"token string\">'node:fs'</span>\nimport <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> from <span class=\"token string\">'csv-parse'</span>\n\nconst __dirname <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> import<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname\n\nprocessFile <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>\n  records <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  parser <span class=\"token operator\">=</span> fs\n  <span class=\"token punctuation\">.</span>createReadStream <span class=\"token string\">\"<span class=\"token interpolation variable\">#{__dirname}</span>/fs_read.csv\"</span>\n  <span class=\"token punctuation\">.</span>pipe <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># CSV options if any</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> await record from parser\n    <span class=\"token comment\"># Work with each record</span>\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">records</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>\n  records <span class=\"token operator\">=</span> await <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span>info records\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/recipe.async.iterator.js\">./packages/csv-parse/samples/recipe.async.iterator.js</a></div></div></p>","frontmatter":{"title":"Async iterator","description":"CSV Parse - how to use ES6 async iterator to traverse your records.","keywords":["csv","parse","parser","example","recipe","async","iterator","stream","pipe","read","promise"]},"headings":[],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/examples/async_iterator.md","slug":"/parse/examples/async_iterator/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}