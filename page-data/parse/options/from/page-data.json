{"componentChunkName":"component---src-templates-page-js","path":"/parse/options/from/","result":{"data":{"page":{"html":"<h1 id=\"option-code-classlanguage-textfromcode\" style=\"position:relative;\"><a href=\"#option-code-classlanguage-textfromcode\" aria-label=\"option code classlanguage textfromcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">from</code></h1>\n<p>The <code class=\"language-text\">from</code> option handles records starting from a requested number of records. Count is 1-based, for example, provides 1 (and not 0) to emit first record.</p>\n<ul>\n<li>Type: <code class=\"language-text\">number</code></li>\n<li>Coercion: <code class=\"language-text\">string</code> to <code class=\"language-text\">number</code></li>\n<li>Optional</li>\n<li>Default: <code class=\"language-text\">1</code></li>\n<li>Validation: positive integer</li>\n<li>Since: 4.0.0</li>\n<li>Related: <a href=\"/parse/options/to_line/\"><code class=\"language-text\">info</code></a>, <a href=\"/parse/options/from_line/\"><code class=\"language-text\">from_line</code></a>, <a href=\"/parse/options/to/\"><code class=\"language-text\">to</code></a> â€” see <a href=\"/parse/options/#available-options\">Available Options</a></li>\n</ul>\n<h2 id=\"inferred-column-names\" style=\"position:relative;\"><a href=\"#inferred-column-names\" aria-label=\"inferred column names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inferred column names</h2>\n<p>When the <code class=\"language-text\">column</code> option is active, the first record is treated as a header. It is not accounted as a record. Thus, the first record is used to retrieve the properties names and the count start from the next record.</p>\n<p>This <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.from.js\">example</a> read the first <code class=\"language-text\">a,b</code> record to determine column names, skip the next record and return records afterward.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    a,b\n    1,2\n    3,4\n    5,6\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> records</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.from.js\">./packages/csv-parse/samples/option.from.js</a></div></div></p>","frontmatter":{"title":"Option from","description":"Option \"from\" handles records starting from a requested number of records.","keywords":["csv","parse","options","from","count","records","info"]},"headings":[{"id":"inferred-column-names","depth":2,"value":"Inferred column names"}],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/options/from.md","slug":"/parse/options/from/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}