{"componentChunkName":"component---src-templates-page-js","path":"/parse/options/from_line/","result":{"data":{"page":{"html":"<h1 id=\"option-code-classlanguage-textfrom_linecode\" style=\"position:relative;\"><a href=\"#option-code-classlanguage-textfrom_linecode\" aria-label=\"option code classlanguage textfrom_linecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">from_line</code></h1>\n<p>The <code class=\"language-text\">from_line</code> option handles records starting from a requested line number. The counting of lines start at <code class=\"language-text\">1</code> which is the default value, thus the first line is <code class=\"language-text\">1</code>.</p>\n<ul>\n<li>Type: <code class=\"language-text\">number</code></li>\n<li>Coercion: <code class=\"language-text\">string</code> to <code class=\"language-text\">number</code></li>\n<li>Optional</li>\n<li>Default: <code class=\"language-text\">1</code></li>\n<li>Validation: positive integer</li>\n<li>Since: 4.0.0</li>\n<li>Related: <a href=\"/parse/options/to_line/\"><code class=\"language-text\">to_line</code></a>, <a href=\"/parse/options/from/\"><code class=\"language-text\">from</code></a>, <code class=\"language-text\">to</code> â€” see <a href=\"/parse/options/#available-options\">Available Options</a></li>\n</ul>\n<h2 id=\"simple-example-with-inferred-column-names\" style=\"position:relative;\"><a href=\"#simple-example-with-inferred-column-names\" aria-label=\"simple example with inferred column names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple example with inferred column names</h2>\n<p>This <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.from_line.js\">example</a> skip the first lines and return records after the second line. The first records is used to determine column names:</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nx,x\na,b\n1,2\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">from_line</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> records</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.from_line.js\">./packages/csv-parse/samples/option.from_line.js</a></div></div></p>","frontmatter":{"title":"Option from_line","description":"Option \"from_line\" handles records starting from a requested line number.","keywords":["csv","parse","options","columns"]},"headings":[{"id":"simple-example-with-inferred-column-names","depth":2,"value":"Simple example with inferred column names"}],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/options/from_line.md","slug":"/parse/options/from_line/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}