{"componentChunkName":"component---src-templates-page-js","path":"/parse/options/","result":{"data":{"page":{"html":"<h1 id=\"csv-parse-options\" style=\"position:relative;\"><a href=\"#csv-parse-options\" aria-label=\"csv parse options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV Parse options</h1>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>All options are optional. The options from the <a href=\"https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options\">Node.js Stream Writable</a> are also supported and passed as is. Only the \"objectMode\" is overwritten to always equal \"true\".</p>\n<h2 id=\"available-options\" style=\"position:relative;\"><a href=\"#available-options\" aria-label=\"available options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available options</h2>\n<ul>\n<li><a href=\"/parse/options/bom/\"><code class=\"language-text\">bom</code></a> (boolean)<br>\n<em>Since version 4.4.0</em><br>\nIf true, detect and exclude the byte order mark (BOM) from the CSV input if present.</li>\n<li><a href=\"/parse/options/cast/\"><code class=\"language-text\">cast</code></a> (boolean|function)<br>\n<em>Since version 2.2.0</em><br>\nAlter the value of a field. If true, the parser will attempt to convert input strings to native types. A function must return the new value and the received arguments are the value to cast and the context object. This option was named <code class=\"language-text\">auto_parse</code> until version 2.</li>\n<li><a href=\"/parse/options/cast_date/\"><code class=\"language-text\">cast_date</code></a> (boolean|function)<br>\n<em>Since version 1.0.5</em><br>\nConvert the CSV field to a date. It requires the <code class=\"language-text\">cast</code> option to be active. This option was named <code class=\"language-text\">auto_parse_date</code> until version 2.</li>\n<li><a href=\"/parse/options/columns/\"><code class=\"language-text\">columns</code></a> (array|boolean|function)<br>\n<em>Since early days</em><br>\nGenerate records as object literals instead of arrays. List of fields as an array, a user defined callback accepting the first line and returning the column names, or <code class=\"language-text\">true</code> if auto-discovered in the first CSV line. Defaults to <code class=\"language-text\">null</code>. Affects the result data set in the sense that records will be objects instead of arrays. A value \"false\" \"null\", or \"undefined\" inside the column array skips the column from the output.</li>\n<li><a href=\"/parse/options/group_columns_by_name/\"><code class=\"language-text\">group_columns_by_name</code></a> (boolean)<br>\n<em>Since version 4.10.0</em><br>\nConvert values into an array of values when columns are activated and when multiple columns of the same name are found.</li>\n<li><a href=\"/parse/options/comment/\"><code class=\"language-text\">comment</code></a> (string|buffer)<br>\n<em>Since early days</em><br>\nTreat all the characters after this one as a comment; one or multiple characters; disabled by default by defining an empty string <code class=\"language-text\">\"\"</code>.</li>\n<li><a href=\"/parse/options/comment_no_infix/\"><code class=\"language-text\">comment_no_infix</code></a> (boolean)<br>\n<em>Since 5.5.0</em><br>\nRestricts the definition of comments to full lines.</li>\n<li><a href=\"/parse/options/delimiter/\"><code class=\"language-text\">delimiter</code></a> (string|Buffer|[string|Buffer])<br>\n<em>Since version 0.0.1</em><br>\nSet one or several field delimiters containing one or several characters. It defaults to <code class=\"language-text\">,</code> (comma).</li>\n<li><a href=\"/parse/options/encoding/\"><code class=\"language-text\">encoding</code></a> (string|Buffer)<br>\n<em>Since version 4.13.0</em><br>\nSet the input and output encodings. Using <code class=\"language-text\">null</code> or <code class=\"language-text\">false</code> output the raw buffer instead of a string and it defaults to <code class=\"language-text\">utf8</code>.</li>\n<li><a href=\"/parse/options/escape/\"><code class=\"language-text\">escape</code></a> (string|Buffer)<br>\n<em>Since version 0.0.1</em><br>\nSet the escape character as one character/byte only. It only applies to quote and escape characters inside quoted fields and it defaults to <code class=\"language-text\">\"</code> (double quote).</li>\n<li><a href=\"/parse/options/from/\"><code class=\"language-text\">from</code></a> (number)<br>\n<em>Since version 1.2.0</em><br>\nStart handling records from a requested number of records. Count is 1-based, for example, provides <code class=\"language-text\">1</code> (and not <code class=\"language-text\">0</code>) to emit first record.</li>\n<li><a href=\"/parse/options/from_line/\"><code class=\"language-text\">from_line</code></a> (number)<br>\n<em>Since version 4.0.0</em><br>\nStart handling records from a requested line number.</li>\n<li><a href=\"/parse/options/ignore_last_delimiters/\"><code class=\"language-text\">ignore_last_delimiters</code></a> (boolean)<br>\n<em>Since version 4.15.0</em><br>\nDisregard any delimiters present in the last field of the record, require the <a href=\"/parse/options/columns/\"><code class=\"language-text\">column</code></a> option when <code class=\"language-text\">true</code>.</li>\n<li><a href=\"/parse/options/info/\"><code class=\"language-text\">info</code></a> (boolean)<br>\n<em>Since version 4.0.0</em><br>\nGenerate two properties <code class=\"language-text\">info</code> and <code class=\"language-text\">record</code> where <code class=\"language-text\">info</code> is a snapshot of the info object at the time the record was created and <code class=\"language-text\">record</code> is the parsed array or object; note, it can be used conjointly with the <code class=\"language-text\">raw</code> option.</li>\n<li><a href=\"/parse/options/ltrim/\"><code class=\"language-text\">ltrim</code></a> (boolean)<br>\n<em>Since early days</em><br>\nIf <code class=\"language-text\">true</code>, ignore whitespace immediately following the delimiter (i.e. left-trim all fields). Defaults to <code class=\"language-text\">false</code>. Does not remove whitespace in a quoted field.</li>\n<li><a href=\"/parse/options/max_record_size/\"><code class=\"language-text\">max_record_size</code></a> (integer)<br>\n<em>Since version 4.0.0</em><br>\nMaximum number of characters to be contained in the field and line buffers before an exception is raised. It was previously named \"max_limit_on_data_read\".</li>\n<li><a href=\"/parse/options/objname/\"><code class=\"language-text\">objname</code></a> (string|Buffer)<br>\n<em>Since early days</em><br>\nName of header-record title to name objects by; the string or Buffer value must not be empty and it must match a header value.</li>\n<li><a href=\"/parse/options/on_record/\"><code class=\"language-text\">on_record</code></a> (function)<br>\n<em>Since 4.7.0</em><br>\nAlter and filter records by executing a user defined function.</li>\n<li><a href=\"/parse/options/on_skip/\"><code class=\"language-text\">on_skip</code></a> (function)<br>\n<em>Since 5.1.0</em><br>\nTrack invalid records without interrupting the parsing process.</li>\n<li><a href=\"/parse/options/quote/\"><code class=\"language-text\">quote</code></a> (char|Buffer|boolean)<br>\n<em>Since version 0.0.1</em><br>\nOptional character surrounding a field as one character only; disabled if null, false or empty; defaults to double quote.</li>\n<li><a href=\"/parse/options/raw/\"><code class=\"language-text\">raw</code></a> (boolean)<br>\n<em>Since version 1.1.6</em><br>\nGenerate two properties <code class=\"language-text\">raw</code> and <code class=\"language-text\">record</code> where <code class=\"language-text\">raw</code> is the original CSV content and <code class=\"language-text\">record</code> is the parsed array or object; note, it can be used conjointly with the <code class=\"language-text\">info</code> option.</li>\n<li><a href=\"/parse/options/record_delimiter/\"><code class=\"language-text\">record_delimiter</code></a> (chars|array)<br>\n<em>Since version 4.0.0</em><br>\nOne or multiple characters used to delimit records; defaults to auto discovery if not provided. Supported auto discovery methods are Linux (\"\\n\"), Apple (\"\\r\") and Windows (\"\\r\\n\") row delimiters. It was previously named <code class=\"language-text\">rowDelimiter</code>.</li>\n<li><a href=\"/parse/options/relax_column_count/\"><code class=\"language-text\">relax_column_count</code></a> (boolean)<br>\n<em>Since version 1.0.6</em><br>\nDiscard inconsistent columns count; disabled if null, false or empty; default to <code class=\"language-text\">false</code>.</li>\n<li><a href=\"/parse/options/relax_column_count/\"><code class=\"language-text\">relax_column_count_less</code></a> (boolean)<br>\n<em>Since version 4.8.0</em><br>\nSimilar to <code class=\"language-text\">relax_column_count</code> but only apply when the record contains less fields than expected.</li>\n<li><a href=\"/parse/options/relax_column_count/\"><code class=\"language-text\">relax_column_count_more</code></a> (boolean)<br>\n<em>Since version 4.8.0</em><br>\nSimilar to <code class=\"language-text\">relax_column_count</code> but only apply when the record contains more fields than expected.</li>\n<li><a href=\"/parse/options/relax_quotes/\"><code class=\"language-text\">relax_quotes</code></a> (boolean)<br>\n<em>Since version 0.0.1</em><br>\nPreserve quotes inside unquoted field (be warned, it doesn't make coffee).</li>\n<li><a href=\"/parse/options/rtrim/\"><code class=\"language-text\">rtrim</code></a> (boolean)<br>\n<em>Since early days</em><br>\nIf <code class=\"language-text\">true</code>, ignore whitespace immediately preceding the delimiter (i.e. right-trim all fields). Defaults to <code class=\"language-text\">false</code>. Does not remove whitespace in a quoted field.</li>\n<li><a href=\"/parse/options/skip_empty_lines/\"><code class=\"language-text\">skip_empty_lines</code></a> (boolean)<br>\n<em>Since version 0.0.5</em><br>\nDon't generate records for empty lines (line matching <code class=\"language-text\">/^$/</code>), defaults to <code class=\"language-text\">false</code>.</li>\n<li><a href=\"/parse/options/skip_records_with_empty_values/\"><code class=\"language-text\">skip_records_with_empty_values</code></a> (boolean)<br>\n<em>Since version 1.1.8</em><br>\nDon't generate records for lines containing empty values (column matching <code class=\"language-text\">/\\s*/</code>), empty Buffer or equals to <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> if their value was casted, defaults to <code class=\"language-text\">false</code>.</li>\n<li><a href=\"/parse/options/skip_records_with_error/\"><code class=\"language-text\">skip_records_with_error</code></a> (boolean)<br>\n<em>Since version 2.1.0</em><br>\nSkip a line with error found inside and directly go process the next line.</li>\n<li><a href=\"/parse/options/to/\"><code class=\"language-text\">to</code></a> (number)<br>\n<em>Since version 1.2.0</em><br>\nStop handling records after the requested number of records.</li>\n<li><a href=\"/parse/options/to_line/\"><code class=\"language-text\">to_line</code></a> (number)<br>\n<em>Since version 4.0.0</em><br>\nStop handling records after the requested line number.</li>\n<li><a href=\"/parse/options/trim/\"><code class=\"language-text\">trim</code></a> (boolean)<br>\n<em>Since early days</em><br>\nIf <code class=\"language-text\">true</code>, ignore whitespaces immediately around the delimiter. Defaults to <code class=\"language-text\">false</code>. Does not remove whitespace in a quoted field.</li>\n</ul>\n<h2 id=\"choose-your-style\" style=\"position:relative;\"><a href=\"#choose-your-style\" aria-label=\"choose your style permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Choose your style</h2>\n<p>The code uses snake case as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. It is however accepted to provide options in camel case. Thus, <code class=\"language-text\">record_delimiter</code> and <code class=\"language-text\">recordDelimiter</code> are equivalent when initialising a new parser. The option will be converted into snake case and exposed as such. For example, in case you need to access the <code class=\"language-text\">record_delimiter</code> option, use <code class=\"language-text\">generate().options.record_delimiter</code> and not <code class=\"language-text\">generate().options.recordDelimiter</code>. Choose the case which best fit your coding style.</p>","frontmatter":{"title":"Options","description":"Options relative to the csv-parse package","keywords":["csv","parse","options","delimiter","columns","comment","escape"]},"headings":[{"id":"introduction","depth":2,"value":"Introduction"},{"id":"available-options","depth":2,"value":"Available options"},{"id":"choose-your-style","depth":2,"value":"Choose your style"}],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/options.md","slug":"/parse/options/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}