{"componentChunkName":"component---src-templates-page-js","path":"/parse/options/cast/","result":{"data":{"page":{"html":"<h1 id=\"option-code-classlanguage-textcastcode\" style=\"position:relative;\"><a href=\"#option-code-classlanguage-textcastcode\" aria-label=\"option code classlanguage textcastcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">cast</code></h1>\n<p>The <code class=\"language-text\">cast</code> option works at the field-level to alter its value. It is possible to transform the field's value or change its type.</p>\n<ul>\n<li>Type: <code class=\"language-text\">function</code></li>\n<li>Optional</li>\n<li>Default: <code class=\"language-text\">undefined</code></li>\n<li>Since: 2.2.0</li>\n<li>Related: <code class=\"language-text\">cast_date</code>, <a href=\"/parse/options/info/\"><code class=\"language-text\">info</code></a>, <a href=\"/parse/options/on_record/\"><code class=\"language-text\">on_record</code></a> â€” see <a href=\"/parse/options/#available-options\">Available Options</a></li>\n</ul>\n<p>The <code class=\"language-text\">cast</code> value is expected to be a function that receives context-rich information. The function has full control over a field.</p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>The <code class=\"language-text\">cast</code> user function is called with 2 arguments: the field <code class=\"language-text\">value</code> and the <code class=\"language-text\">context</code> object. The user function may return the value as-is or any other value including <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code>.</p>\n<p>The <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/test/option.cast.coffee\"><code class=\"language-text\">test/option.cast.coffee</code></a> test provides insights on how to use it and its supported functionalities. It returns the first column untouched, converts the second column to an integer and return a new string from the third column's value.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse/sync\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  1,2,3\n  4,5,6\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The cast option exect a function which</span>\n  <span class=\"token comment\">// is called with two arguments,</span>\n  <span class=\"token comment\">// the parsed value and a context object</span>\n  <span class=\"token function-variable function\">cast</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Index indicates the column position</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Return the value untouched</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Convert the value to a string</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Return a different value</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Value is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Value is 3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Value is 6\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.js\">./packages/csv-parse/samples/option.cast.js</a></div></div></p>\n<h2 id=\"context\" style=\"position:relative;\"><a href=\"#context\" aria-label=\"context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context</h2>\n<p>The <code class=\"language-text\">context</code> object exposes the following properties:</p>\n<ul>\n<li><code class=\"language-text\">column</code> (number|string)<br>\nThe column name if the <code class=\"language-text\">columns</code> options is defined, or the field position.</li>\n<li><code class=\"language-text\">empty_lines</code> (number)<br>\nInternal counter of empty lines encountered until this field.</li>\n<li><code class=\"language-text\">header</code> (boolean)<br>\nA boolean indicating if the provided value is a part of the header.</li>\n<li><code class=\"language-text\">index</code> (number)<br>\nThe field position within the current record starting at 0.</li>\n<li><code class=\"language-text\">invalid_field_length</code> (number)<br>\nNumber of records with a non uniform length when <a href=\"/parse/options/relax_column_count/\"><code class=\"language-text\">relax_column_count</code></a> is true. It was named <code class=\"language-text\">skipped_lines</code> until version 3.</li>\n<li><code class=\"language-text\">lines</code> (number)<br>\nThe number of lines which have been processed including the current line.</li>\n<li><code class=\"language-text\">quoting</code> (boolean)<br>\nA boolean indicating if the field was surrounded by quotes.</li>\n<li><code class=\"language-text\">records</code> (number)<br>\nThe number of records which have been fully parsed. It was named <code class=\"language-text\">count</code> until version 3.</li>\n</ul>\n<p>The <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.context.js\">context example</a> uses the context to transform the first field into a date and replace the second field with the injected context:</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse/sync\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  2000-01-01,date1\n  2050-11-27,date2\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The cast option exect a function which</span>\n  <span class=\"token comment\">// is called with two arguments,</span>\n  <span class=\"token comment\">// the parsed value and a context object</span>\n  <span class=\"token function-variable function\">cast</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// You can return any value</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Such as a string</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">T05:00:00.000Z</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Or the `context` object literal</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"2000-01-01T05:00:00.000Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">bytes</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">comment_lines</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">empty_lines</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">invalid_field_length</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">lines</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">records</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">column</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">quoting</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"2050-11-27T05:00:00.000Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">bytes</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">comment_lines</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">empty_lines</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">invalid_field_length</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">lines</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">records</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">column</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">quoting</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.js\">./packages/csv-parse/samples/option.cast.js</a></div></div></p>\n<h2 id=\"using-the-code-classlanguage-textcastcode-and-code-classlanguage-textcolumnscode-functions-conjointly\" style=\"position:relative;\"><a href=\"#using-the-code-classlanguage-textcastcode-and-code-classlanguage-textcolumnscode-functions-conjointly\" aria-label=\"using the code classlanguage textcastcode and code classlanguage textcolumnscode functions conjointly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the <code class=\"language-text\">cast</code> and <code class=\"language-text\">columns</code> functions conjointly</h2>\n<p>The <code class=\"language-text\">cast</code> function is called for each and every field, whether it is considered a header or not. The <code class=\"language-text\">columns</code> function is called once the first record is created (if treated as a header). For this reason, <code class=\"language-text\">cast</code> is executed before <code class=\"language-text\">columns</code>.</p>\n<p>To distinguish a header field from a data field in the <code class=\"language-text\">cast</code> function, use the <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.header.column.fn.js\"><code class=\"language-text\">context.header</code> property</a> from the second argument to the <code class=\"language-text\">cast</code> function:</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse/sync\"</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n    dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      a,b,c\n      1,2,3\n      4,5,6\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">cast</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>column <span class=\"token operator\">===</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">columns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">header</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">label</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> label<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.js\">./packages/csv-parse/samples/option.cast.js</a></div></div></p>\n<p>Note, the above example can be rewritten to implement the <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.header.column.true.js\"><code class=\"language-text\">columns</code> transformation directly inside <code class=\"language-text\">cast</code></a>, by setting <code class=\"language-text\">columns: true</code> and by replacing <code class=\"language-text\">if(context.header) return value;</code> by <code class=\"language-text\">if(context.header) return value.toUpperCase();</code>:</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse/sync\"</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n    dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      a,b,c\n      1,2,3\n      4,5,6\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">cast</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>column <span class=\"token operator\">===</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.cast.js\">./packages/csv-parse/samples/option.cast.js</a></div></div></p>","frontmatter":{"title":"Option cast","description":"Option \"cast\" alter a field value.","keywords":["csv","parse","options","cast","context","lines","quoting"]},"headings":[{"id":"usage","depth":2,"value":"Usage"},{"id":"context","depth":2,"value":"Context"},{"id":"using-the-code-classlanguage-textcastcode-and-code-classlanguage-textcolumnscode-functions-conjointly","depth":2,"value":"Using the <code class=\"language-text\">cast</code> and <code class=\"language-text\">columns</code> functions conjointly"}],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/options/cast.md","slug":"/parse/options/cast/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}