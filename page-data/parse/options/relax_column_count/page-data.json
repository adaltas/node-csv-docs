{"componentChunkName":"component---src-templates-page-js","path":"/parse/options/relax_column_count/","result":{"data":{"page":{"html":"<h1 id=\"option-code-classlanguage-textrelax_column_countcode\" style=\"position:relative;\"><a href=\"#option-code-classlanguage-textrelax_column_countcode\" aria-label=\"option code classlanguage textrelax_column_countcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">relax_column_count</code></h1>\n<p>The <code class=\"language-text\">relax_column_count</code> option tolerates data sets with inconsistent number of fields between records. By default, an error is thrown if two records have a different number of fields.</p>\n<p>Note, this option is completed by the <a href=\"/parse/options/relax_column_count_less/\"><code class=\"language-text\">relax_column_count_less</code> option</a> and the <a href=\"/parse/options/relax_column_count_more/\"><code class=\"language-text\">relax_column_count_more</code> option</a> which behave similarly.</p>\n<ul>\n<li>Type: <code class=\"language-text\">boolean</code></li>\n<li>Optional</li>\n<li>Default: <code class=\"language-text\">false</code></li>\n<li>Since: 1.0.6</li>\n<li>Related: <a href=\"/parse/options/relax_column_count_less/\"><code class=\"language-text\">relax_column_count_less</code></a>, <code class=\"language-text\">quote</code>, <a href=\"/parse/options/relax_column_count_more/\"><code class=\"language-text\">relax_column_count_more</code></a> â€” see <a href=\"/parse/options/#available-options\">Available Options</a></li>\n</ul>\n<p>The option can be used conjointly with the <code class=\"language-text\">columns</code> option. The expected number of fields is determined by the length of the <code class=\"language-text\">columns</code> option, wether it is defined by the user or dynamically discovered.</p>\n<h2 id=\"default-behavior\" style=\"position:relative;\"><a href=\"#default-behavior\" aria-label=\"default behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default behavior</h2>\n<p>The <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.js\"><code class=\"language-text\">option.relax_column_count.js</code> example</a> expect records with 2 fields. The second line contains less than 2 fields and the third line contains more than 2 fields. Both lines would have generated an error if the <code class=\"language-text\">relax_column_count</code> option was not <code class=\"language-text\">true</code>.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    \"a 1\",\"a 2\"\n    \"b 1\"\n    \"c 1\",\"c 2\",\"c 3\"\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">relax_column_count</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> records</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"a 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a 2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"b 1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"c 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c 3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.js\">./packages/csv-parse/samples/option.relax_column_count.js</a></div></div></p>\n<h2 id=\"working-with-columns-and-objects\" style=\"position:relative;\"><a href=\"#working-with-columns-and-objects\" aria-label=\"working with columns and objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with columns and objects</h2>\n<p>When using the <code class=\"language-text\">columns</code> option, the records are generated as objects whose properties are found in the column option and associated based on their index position. If a record has fewer fields than the number of columns, then the unmatched columns are discarded. Inversely, if a record has more fields than the number of columns, then the unmatched fields are discarded. The <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.columns.js\"><code class=\"language-text\">option.relax_column_count.columns.js</code> example</a> illustrates both behavior:</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> dedent <span class=\"token keyword\">from</span> <span class=\"token string\">\"dedent\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  dedent<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    lastname,firstname,fullname\n    Ritchie\n    Lovelace,Ada,\"Augusta Ada King, Countess of Lovelace\"\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">relax_column_count</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> records</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ritchie\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lovelace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ada\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">fullname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Augusta Ada King, Countess of Lovelace\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.js\">./packages/csv-parse/samples/option.relax_column_count.js</a></div></div></p>\n<h2 id=\"handling-inconsistent-number-of-fields-errors\" style=\"position:relative;\"><a href=\"#handling-inconsistent-number-of-fields-errors\" aria-label=\"handling inconsistent number of fields errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling inconsistent number of fields errors</h2>\n<p>When used conjointly with other options, it is possible to accept inconsistent records and provide you own parsing implementation. For exemple, the <a href=\"/parse/options/on_record/\"><code class=\"language-text\">on_record</code></a> option let you insert your custom code. If needed, the <a href=\"/parse/options/raw/\"><code class=\"language-text\">raw</code></a> option expose the raw record. Finally, the full error is available including the error code.</p>\n<p>This is an example to <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.record_inconsistent_length.js\">handle inconsistent record field lengths</a>.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse/sync\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2\\nin:va:lid\\n3,4\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">relax_column_count</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">on_record</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> raw<span class=\"token punctuation\">,</span> record <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">\"CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> raw<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> record<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"in\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"va\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lid\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.js\">./packages/csv-parse/samples/option.relax_column_count.js</a></div></div></p>\n<p>If the <a href=\"/parse/options/on_record/\"><code class=\"language-text\">columns</code></a> option is active, the behavior is similar but the error throw is now <code class=\"language-text\">CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH</code>. The <code class=\"language-text\">on_record</code> function can return any value. For example in <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.record_inconsistent_columns.js\">the inconsistent columns example</a>, the <code class=\"language-text\">columns</code> option is activated and an array is returned instead of an object literal.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-parse/sync\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2\\nin:va:lid\\n3,4\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">columns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">relax_column_count</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">on_record</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> raw<span class=\"token punctuation\">,</span> record <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">\"CSV_RECORD_INCONSISTENT_COLUMNS\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> raw<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> record<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"in\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"va\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lid\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-parse/samples/option.relax_column_count.js\">./packages/csv-parse/samples/option.relax_column_count.js</a></div></div></p>","frontmatter":{"title":"Option relax_column_count","description":"Option \"relax_column_count\" tolerates data sets with inconsistent number of fields.","keywords":["csv","parse","options","relax_column_count","columns"]},"headings":[{"id":"default-behavior","depth":2,"value":"Default behavior"},{"id":"working-with-columns-and-objects","depth":2,"value":"Working with columns and objects"},{"id":"handling-inconsistent-number-of-fields-errors","depth":2,"value":"Handling inconsistent number of fields errors"}],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/parse/options/relax_column_count.md","slug":"/parse/options/relax_column_count/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}