{"componentChunkName":"component---src-templates-page-js","path":"/stringify/api/stream/","result":{"data":{"page":{"html":"<h1 id=\"nodejs-stream-api\" style=\"position:relative;\"><a href=\"#nodejs-stream-api\" aria-label=\"nodejs stream api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js Stream API</h1>\n<p>The main module of the package implements the native Node.js <a href=\"https://nodejs.org/api/stream.html#stream_object_mode_duplex_streams\">transform stream</a> which is both readable and writable.</p>\n<p>This is the recommended approach if you need a maximum of power. It ensures\nscalability by treating your data as a stream from the source to the destination.</p>\n<p>The signature is <code class=\"language-text\">const stream = stringify([options])</code>.</p>\n<p>The <a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-stringify/samples/api.stream.js\">stream example</a> write 2 records and register multiple events to read the generated CSV output and get notified when the serialisation is finished.</p>\n<p><div class=\"gatsby-highlight display-embed-file-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> stringify <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"csv-stringify\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> assert <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Initialize the stringifier</span>\n<span class=\"token keyword\">const</span> stringifier <span class=\"token operator\">=</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">delimiter</span><span class=\"token operator\">:</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Use the readable stream api to consume CSV data</span>\nstringifier<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readable\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> row<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=</span> stringifier<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Catch any error</span>\nstringifier<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// When finished, validate the CSV output with the expected value</span>\nstringifier<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"root:x:0:0:root:/root:/bin/bash\\n\"</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">\"someone:x:1022:1022::/home/someone:/bin/bash\\n\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write records to the stream</span>\nstringifier<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstringifier<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"someone\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"1022\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"1022\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/home/someone\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Close the writable stream</span>\nstringifier<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"display-embed-file\"><a href=\"https://github.com/adaltas/node-csv/blob/master/packages/csv-stringify/samples/api.stream.js\">./packages/csv-stringify/samples/api.stream.js</a></div></div></p>\n<p><em>After cloning the project repository, run this example with the command <code class=\"language-text\">node samples/api.stream.js</code>.</em></p>","frontmatter":{"title":"Stream API","description":"The stream API might not be the most pleasant API to use but is scalable.","keywords":["csv","stringify","api","stream","async","pipe","native","write","events"]},"headings":[],"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/stringify/api/stream.md","slug":"/stringify/api/stream/"}}},"pageContext":{}},"staticQueryHashes":["421902736"],"slicesMap":{}}